/*
 * generated by Xtext 2.25.0
 */
grammar InternalSalarioLiquido;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package br.ufrn.ppgti.ppgti1007.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package br.ufrn.ppgti.ppgti1007.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import br.ufrn.ppgti.ppgti1007.services.SalarioLiquidoGrammarAccess;

}

@parser::members {

 	private SalarioLiquidoGrammarAccess grammarAccess;

    public InternalSalarioLiquidoParser(TokenStream input, SalarioLiquidoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Salarios";
   	}

   	@Override
   	protected SalarioLiquidoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSalarios
entryRuleSalarios returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSalariosRule()); }
	iv_ruleSalarios=ruleSalarios
	{ $current=$iv_ruleSalarios.current; }
	EOF;

// Rule Salarios
ruleSalarios returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSalariosAccess().getSalariosSalarioParserRuleCall_0());
			}
			lv_salarios_0_0=ruleSalario
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSalariosRule());
				}
				add(
					$current,
					"salarios",
					lv_salarios_0_0,
					"br.ufrn.ppgti.ppgti1007.SalarioLiquido.Salario");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSalario
entryRuleSalario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSalarioRule()); }
	iv_ruleSalario=ruleSalario
	{ $current=$iv_ruleSalario.current; }
	EOF;

// Rule Salario
ruleSalario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Salario'
		{
			newLeafNode(otherlv_0, grammarAccess.getSalarioAccess().getSalarioKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSalarioAccess().getValorDoubleParserRuleCall_1_0());
				}
				lv_valor_1_0=ruleDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSalarioRule());
					}
					set(
						$current,
						"valor",
						lv_valor_1_0,
						"br.ufrn.ppgti.ppgti1007.SalarioLiquido.Double");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='Dependentes'
			{
				newLeafNode(otherlv_2, grammarAccess.getSalarioAccess().getDependentesKeyword_2_0());
			}
			(
				(
					lv_dependentes_3_0=RULE_INT
					{
						newLeafNode(lv_dependentes_3_0, grammarAccess.getSalarioAccess().getDependentesINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSalarioRule());
						}
						setWithLastConsumed(
							$current,
							"dependentes",
							lv_dependentes_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
		(
			otherlv_4='Descontos'
			{
				newLeafNode(otherlv_4, grammarAccess.getSalarioAccess().getDescontosKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSalarioAccess().getDescontosDoubleParserRuleCall_3_1_0());
					}
					lv_descontos_5_0=ruleDouble
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSalarioRule());
						}
						set(
							$current,
							"descontos",
							lv_descontos_5_0,
							"br.ufrn.ppgti.ppgti1007.SalarioLiquido.Double");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='Previdencia'
			{
				newLeafNode(otherlv_6, grammarAccess.getSalarioAccess().getPrevidenciaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSalarioAccess().getPrevidenciaDoubleParserRuleCall_4_1_0());
					}
					lv_previdencia_7_0=ruleDouble
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSalarioRule());
						}
						set(
							$current,
							"previdencia",
							lv_previdencia_7_0,
							"br.ufrn.ppgti.ppgti1007.SalarioLiquido.Double");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDoubleRule()); }
	iv_ruleDouble=ruleDouble
	{ $current=$iv_ruleDouble.current.getText(); }
	EOF;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.25.0
 */
package br.ufrn.ppgti.ppgti1007.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SalarioLiquidoGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SalariosElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufrn.ppgti.ppgti1007.SalarioLiquido.Salarios");
		private final Assignment cSalariosAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSalariosSalarioParserRuleCall_0 = (RuleCall)cSalariosAssignment.eContents().get(0);
		
		//Salarios:
		//    salarios += Salario*;
		@Override public ParserRule getRule() { return rule; }
		
		//salarios += Salario*
		public Assignment getSalariosAssignment() { return cSalariosAssignment; }
		
		//Salario
		public RuleCall getSalariosSalarioParserRuleCall_0() { return cSalariosSalarioParserRuleCall_0; }
	}
	public class SalarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufrn.ppgti.ppgti1007.SalarioLiquido.Salario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSalarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorDoubleParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDependentesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDependentesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDependentesINTTerminalRuleCall_2_1_0 = (RuleCall)cDependentesAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDescontosKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDescontosAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDescontosDoubleParserRuleCall_3_1_0 = (RuleCall)cDescontosAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cPrevidenciaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPrevidenciaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPrevidenciaDoubleParserRuleCall_4_1_0 = (RuleCall)cPrevidenciaAssignment_4_1.eContents().get(0);
		
		//Salario:
		//    'Salario' valor=Double ('Dependentes' dependentes=INT)? ('Descontos' descontos=Double)? ('Previdencia' previdencia=Double)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Salario' valor=Double ('Dependentes' dependentes=INT)? ('Descontos' descontos=Double)? ('Previdencia' previdencia=Double)?
		public Group getGroup() { return cGroup; }
		
		//'Salario'
		public Keyword getSalarioKeyword_0() { return cSalarioKeyword_0; }
		
		//valor=Double
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }
		
		//Double
		public RuleCall getValorDoubleParserRuleCall_1_0() { return cValorDoubleParserRuleCall_1_0; }
		
		//('Dependentes' dependentes=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Dependentes'
		public Keyword getDependentesKeyword_2_0() { return cDependentesKeyword_2_0; }
		
		//dependentes=INT
		public Assignment getDependentesAssignment_2_1() { return cDependentesAssignment_2_1; }
		
		//INT
		public RuleCall getDependentesINTTerminalRuleCall_2_1_0() { return cDependentesINTTerminalRuleCall_2_1_0; }
		
		//('Descontos' descontos=Double)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'Descontos'
		public Keyword getDescontosKeyword_3_0() { return cDescontosKeyword_3_0; }
		
		//descontos=Double
		public Assignment getDescontosAssignment_3_1() { return cDescontosAssignment_3_1; }
		
		//Double
		public RuleCall getDescontosDoubleParserRuleCall_3_1_0() { return cDescontosDoubleParserRuleCall_3_1_0; }
		
		//('Previdencia' previdencia=Double)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Previdencia'
		public Keyword getPrevidenciaKeyword_4_0() { return cPrevidenciaKeyword_4_0; }
		
		//previdencia=Double
		public Assignment getPrevidenciaAssignment_4_1() { return cPrevidenciaAssignment_4_1; }
		
		//Double
		public RuleCall getPrevidenciaDoubleParserRuleCall_4_1_0() { return cPrevidenciaDoubleParserRuleCall_4_1_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufrn.ppgti.ppgti1007.SalarioLiquido.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Double returns ecore::EDouble : INT ('.' INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	private final SalariosElements pSalarios;
	private final SalarioElements pSalario;
	private final DoubleElements pDouble;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SalarioLiquidoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSalarios = new SalariosElements();
		this.pSalario = new SalarioElements();
		this.pDouble = new DoubleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufrn.ppgti.ppgti1007.SalarioLiquido".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Salarios:
	//    salarios += Salario*;
	public SalariosElements getSalariosAccess() {
		return pSalarios;
	}
	
	public ParserRule getSalariosRule() {
		return getSalariosAccess().getRule();
	}
	
	//Salario:
	//    'Salario' valor=Double ('Dependentes' dependentes=INT)? ('Descontos' descontos=Double)? ('Previdencia' previdencia=Double)?;
	public SalarioElements getSalarioAccess() {
		return pSalario;
	}
	
	public ParserRule getSalarioRule() {
		return getSalarioAccess().getRule();
	}
	
	//Double returns ecore::EDouble : INT ('.' INT)?;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

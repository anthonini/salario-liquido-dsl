/*
 * generated by Xtext 2.25.0
 */
package br.ufrn.ppgti.ppgti1007.serializer;

import br.ufrn.ppgti.ppgti1007.salarioLiquido.Salario;
import br.ufrn.ppgti.ppgti1007.salarioLiquido.SalarioLiquidoPackage;
import br.ufrn.ppgti.ppgti1007.salarioLiquido.Salarios;
import br.ufrn.ppgti.ppgti1007.services.SalarioLiquidoGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class SalarioLiquidoSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SalarioLiquidoGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SalarioLiquidoPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SalarioLiquidoPackage.SALARIO:
				sequence_Salario(context, (Salario) semanticObject); 
				return; 
			case SalarioLiquidoPackage.SALARIOS:
				sequence_Salarios(context, (Salarios) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Salario returns Salario
	 *
	 * Constraint:
	 *     (valor=Double dependentes=INT? descontos=Double? previdencia=Double?)
	 */
	protected void sequence_Salario(ISerializationContext context, Salario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Salarios returns Salarios
	 *
	 * Constraint:
	 *     salarios+=Salario+
	 */
	protected void sequence_Salarios(ISerializationContext context, Salarios semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
